SUBTRACT -> subtract
ADD -> add
MULT -> mult
DIV -> div
MOD -> mod
POWER -> power
INCRE -> incre
DECRE -> decre
PLUSEQ -> pluseq
SUBEQ -> subeq
POWEQ -> poweq
DIVEQ -> diveq
MULTEQ -> multeq
MODEQ -> modeq
EQUAL -> equal
IS_EQUAL -> is_equal
IS_EQUALS -> is_equals
IS_NOT_EQUAL -> is_not_equal
IS_NOT_EQUALS -> is_not_equals
AND -> and
OR -> or
NO -> no
G -> g
L -> l
GE -> ge
LE -> le
CONST -> const
VAR -> var
LET -> let
FINAL -> final
NULL -> null
VARBS -> CONST
VARBS -> VAR
VARBS -> LET
VARBSBOL -> NOVARBS BOOL NOVARBS BOOL VARBSOL
NOVARBS -> VARBS
NOVARBS -> NO VARBS
FOR -> for
WHILE -> while
IF -> if
ELSE -> else
ELSE_IF -> else_if
SWITCH -> switch
CASE -> case
TRY -> try
THROW -> throw
CATCH -> catch
RETURN -> return
CLASS -> class
FUNC -> func
CONTINUE -> continue
FINALLY -> finally
BREAK -> break
TRUE -> true
FALSE -> false
COMMA -> comma
DOT -> dot
QUOTATION -> quotation
DOUBLE_QUOTATION -> double_quotation
SEMICOLON -> semicolon
DOUBLE_DOT -> double_dot
ENTER -> enter
LCR -> lcr
RCR -> rcr
LPR -> lpr
LPR -> lpr
S -> S SEMICOLON
S -> SEMICOLON S
S -> SS
SS -> PART SS
PART -> CLASS_STATE
PART -> FUNC_STATE
PART -> FOR_STATE
PART -> WHILE_STATE
PART -> IF_STATE
PART -> SWITCH_STATE
PART -> THROW_STATE
PART -> FINALLY_STATE
PART -> DEFAULT_STATE
PART -> CASE_STATE
PART -> SENTENCE
SS -> CLASS_STATE
SS -> FUNC_STATE
SS -> FOR_STATE
SS -> WHILE_STATE
SS -> IF_STATE
SS -> SWITCH_STATE
SS -> THROW_STATE
SS -> FINALLY_STATE
SS -> DEFAULT_STATE
SS -> CASE_STATE
SS -> SENTENCE
SENTENCE -> BREAK
SENTENCE -> CONTINUE
SENTENCE -> WHILE_STATE
SENTENCE -> ASSIGN
SENTENCE -> IF_STATE
SENTENCE -> RETURN
SENTENCE -> THROW_STATE
SENTENCE -> CASE_STATE
SENTENCE -> TRY_STATE
SENTENCE -> DEFAULT_STATE
SENTENCE -> FINALLY_STATE
SENTENCE -> FOR_STATE
SENTENCE -> SEMICOLON SENTENCE
SENTENCE -> SENTENCE SEMICOLON
ARITMAT_OPERATOR -> ADD
ARITMAT_OPERATOR -> SUBTRACT
ARITMAT_OPERATOR -> MULT
ARITMAT_OPERATOR -> DIV
ARITMAT_OPERATOR -> MOD
ARITMAT_OPERATOR -> POWER
INDRE -> INCRE
INDRE -> DECRE
GL -> G
GL -> GE
GL -> L
GL -> LE
BOOL -> IS_EQUAL
BOOL -> IS_NOT_EQUAL
BOOL -> IS_EQUALS
BOOL -> IS_NOT_EQUALS
BOOL -> G
BOOL -> GE
BOOL -> L
BOOL -> LE
BOOL -> AND
BOOL -> OR
FOR_STATE -> FOR LPR VAR SEMICOLON VAR GL VAR SEMICOLON VAR INDRE RPR LCR SENTENCE RCR
FOR_STATE -> FOR LPR VAR SEMICOLON VAR GL VAR SEMICOLON VAR INDRE RPR LCR FOR_STATE RCR
FOR_STATE -> FOR LPR VAR SEMICOLON VAR GL VAR SEMICOLON INDRE VAR RPR LCR SENTENCE RCR
FOR_STATE -> FOR LPR VAR SEMICOLON VAR GL VAR SEMICOLON INDRE VAR RPR LCR FOR_STATE RCR
FOR_STATE -> FOR LPR CONST SEMICOLON VAR GL VAR SEMICOLON VAR INDRE RPR LCR SENTENCE RCR
FOR_STATE -> FOR LPR CONST SEMICOLON VAR GL VAR SEMICOLON VAR INDRE RPR LCR FOR_STATE RCR
FOR_STATE -> FOR LPR CONST SEMICOLON VAR GL VAR SEMICOLON INDRE VAR RPR LCR SENTENCE RCR
FOR_STATE -> FOR LPR CONST SEMICOLON VAR GL VAR SEMICOLON INDRE VAR RPR LCR FOR_STATE RCR
FOR_STATE -> FOR LPR LET SEMICOLON VAR GL VAR SEMICOLON VAR INDRE RPR LCR SENTENCE RCR
FOR_STATE -> FOR LPR LET SEMICOLON VAR GL VAR SEMICOLON VAR INDRE RPR LCR FOR_STATE RCR
FOR_STATE -> FOR LPR LET SEMICOLON VAR GL VAR SEMICOLON INDRE VAR RPR LCR SENTENCE RCR
FOR_STATE -> FOR LPR LET SEMICOLON VAR GL VAR SEMICOLON INDRE VAR RPR LCR FOR_STATE RCR
IF_STATE -> IF LPR NOVARBS RPR LCR SENTENCE RCR
IF_STATE -> IF LPR NOVARBS RPR LCR IF_STATE RCR
IF_STATE -> IF LPR NOVARBS BOOL NOVARBS RPR LCR SENTENCE RCR
IF_STATE -> IF LPR VARBSBOL NOVARBS RPR LCR SENTENCE RCR
IF_STATE -> IF LPR NOVARBS RPR LCR SENTENCE RCR ELSE LCR SENTENCE RCR
IF_STATE -> IF LPR NOVARBS RPR LCR IF_STATE RCR ELSE LCR SENTENCE RCR
IF_STATE -> IF LPR NOVARBS BOOL NOVARBS RPR LCR SENTENCE RCR ELSE LCR SENTENCE RCR
IF_STATE -> IF LPR VARBSBOL NOVARBS RPR LCR SENTENCE RCR ELSE LCR SENTENCE RCR
IF_STATE -> IF LPR NOVARBS RPR LCR SENTENCE RCR ELSE IF_STATE
IF_STATE -> IF LPR NOVARBS BOOL NOVARBS RPR LCR SENTENCE RCR ELSE IF_STATE
IF_STATE -> IF LPR VARBSBOL VARBS RPR LCR SENTENCE RCR ELSE IF_STATE
IF_STATE -> IF LPR NOVARBS RPR LCR THROWS VARBS RCR ELSE IF_STATE
IF_STATE -> IF LPR NOVARBS BOOL NOVARBS RPR LCR THROWS VARBS RCR ELSE IF_STATE
IF_STATE -> IF LPR VARBSBOL VARBS RPR LCR THROWS VARBS RCR ELSE IF_STATE
IF_STATE -> IF LPR NOVARBS RPR LCR CONTINUE RCR ELSE IF_STATE
IF_STATE -> IF LPR NOVARBS BOOL NOVARBS RPR LCR CONTINUE RCR ELSE IF_STATE
IF_STATE -> IF LPR VARBSBOL VARBS RPR LCR CONTINUE RCR ELSE IF_STATE
WHILE_STATE -> WHILE LPR NOVARBS RPR LCR SENTENCE RCR
WHILE_STATE -> WHILE LPR NOVARBS BOOL NOVARBS RPR LCR SENTENCE RCR
WHILE_STATE -> WHILE LPR VARBSBOL NOVARBS RPR LCR SENTENCE RCR
CASES -> CASE VARBS DOUBLE_DOT ENTER SENTENCE BREAK SEMICOLON ENTER CASES
SWITCH_STATE -> SWITCH LPR VARBS RPR LCR CASES DEFAULT DOUBLE_DOT ENTER SENTENCE ENTER BREAK SEMICOLON RCR
TRY_STATE -> TRY LCR SENTENCE RCR CATCH LBR NOVARBS RBR LCR SENTENCE RCR
FUNC_STATE -> FUNC LPR NOVARBS RPR LCR SENTENCE RCR
FUNC_STATE -> FUNC LPR NOVARBS BOOL NOVARBS RPR LCR SENTENCE RCR
FUNC_STATE -> FUNC LPR NOVARBSBOL NOVARBS RPR LCR SENTENCE RCR
FUNC_STATE -> FUNC LPR NOVARBS RPR LCR SENTENCE RCR FUNC_STATE
FUNC_STATE -> FUNC LPR NOVARBS BOOL NOVARBS RPR LCR SENTENCE RCR FUNC_STATE
FUNC_STATE -> FUNC LPR NOVARBSBOL NOVARBS RPR LCR SENTENCE RCR FUNC_STATE
CLASS_STATE -> CLASS VARBS LCR FUNC_STATE RCR



































































